const express = require('express');
const router = express.Router();
const authController = require('../controllers/authController');

router.get('/login', authController.showLoginForm);
router.post('/login', authController.loginUser);

router.get('/signup', authController.showSignupForm);
router.post('/signup', authController.signupUser);


module.exports = router;const express = require('express');
const router = express.Router();
const eventController = require('../controllers/eventController');
const authController = require('../controllers/authController');

// Ruta pentru pagina principală (lista evenimente)
router.get('/', eventController.index);

// Login și Signup
router.get('/login', authController.showLoginForm);
router.post('/login', authController.loginUser);
router.get('/signup', authController.showSignupForm);
router.post('/signup', authController.signupUser);

// Dashboard-uri în funcție de tipul de cont
router.get('/dashboard/participant/:id', eventController.participantDashboard);
//router.get('/dashboard/:id', eventController.organizerDashboard); // Creezi această funcție în controller

// Formular creare eveniment (organizer)
router.get('/create-event/:organizerId', eventController.showCreateForm);
router.post('/create-event/:organizerId', eventController.createEvent);


module.exports = router;<!DOCTYPE html>
<html lang="ro">
<head>
  <meta charset="UTF-8">
  <title>Autentificare</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div class="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
    <h2 class="text-2xl font-bold mb-6">Autentificare</h2>
    <form action="/login" method="POST" class="space-y-4">
      <div>
        <label for="email" class="block font-medium">Email</label>
        <input type="email" name="email" id="email" required class="w-full border rounded px-3 py-2 mt-1">
      </div>

      <div>
        <label for="password" class="block font-medium">Parolă</label>
        <input type="password" name="password" id="password" required class="w-full border rounded px-3 py-2 mt-1">
      </div>

      <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700">
        Logare
      </button>
    </form>

    <p class="mt-4 text-sm text-center">Nu ai cont? <a href="/signup" class="text-blue-600 hover:underline">Înregistrează-te</a></p>
  </div>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Event Management</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 text-gray-900">
  <header class="bg-blue-700 text-white py-4 px-6 flex justify-between items-center">
    <img src="/img/logo.png" class="h-10" alt="Logo">
    <a href="/login" class="bg-white text-blue-700 px-4 py-2 rounded hover:bg-gray-200">Log In</a>
  </header>

  <section class="bg-gray-200 py-12 text-center">
    <h1 class="text-4xl font-bold">Welcome to Event Management</h1>
    <p class="mt-2 text-lg">Descoperă și participă la evenimente memorabile!</p>
  </section>

  <div class="max-w-5xl mx-auto p-6">
    <h2 class="text-2xl font-semibold mb-6">Upcoming Events</h2>
    <div class="space-y-6">
      <% events.forEach(event => { %>
        <div class="flex flex-col md:flex-row items-start bg-white p-4 rounded-lg shadow space-y-4 md:space-y-0 md:space-x-6">
          <img src="<%= event.photo %>" alt="Event image" class="w-full md:w-1/3 h-48 object-cover rounded">
          <div class="flex-1">
            <h3 class="text-xl font-bold"><%= event.title %></h3>
            <p class="text-gray-700 mb-2"><%= event.description %></p>
            <p class="text-sm"><strong>Locație:</strong> <%= event.location %></p>
            <p class="text-sm"><strong>Data:</strong> <%= new Date(event.event_date).toLocaleDateString("ro-RO", { day: "2-digit", month: "long", year: "numeric" }) %></p>
            <a href="/event/<%= event.id %>" class="mt-2 inline-block bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Accesează</a>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
</body>
</html>
<!DOCTYPE html>
<html lang="ro">
<head>
  <meta charset="UTF-8">
  <title>Creare Eveniment</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 text-gray-900">
  <div class="max-w-xl mx-auto mt-10 p-6 bg-white rounded-lg shadow">
    <h1 class="text-3xl font-bold mb-2">DASHBOARD</h1>
    <h2 class="text-xl font-semibold mb-6">Creare Eveniment</h2>

    <form action="/create-event/<%= organizerId %>" method="POST" class="space-y-4">
      <input type="hidden" name="organizer_id" value="<%= organizerId %>">

      <div>
        <label for="title" class="block font-medium">Titlu</label>
        <input type="text" name="title" required class="w-full border rounded px-3 py-2 mt-1">
      </div>

      <div>
        <label for="description" class="block font-medium">Descriere</label>
        <textarea name="description" rows="4" required class="w-full border rounded px-3 py-2 mt-1"></textarea>
      </div>

      <div>
        <label for="location" class="block font-medium">Locație</label>
        <input type="text" name="location" required class="w-full border rounded px-3 py-2 mt-1">
      </div>

      <div>
        <label for="event_date" class="block font-medium">Data evenimentului</label>
        <input type="datetime-local" name="event_date" required class="w-full border rounded px-3 py-2 mt-1">
      </div>

      <div>
        <label for="max_participants" class="block font-medium">Număr maxim participanți</label>
        <input type="number" name="max_participants" min="1" class="w-full border rounded px-3 py-2 mt-1">
      </div>

      <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700">
        Crează eveniment
      </button>
    </form>
  </div>
</body>
</html>
<!DOCTYPE html>
<html lang="ro">
<head>
  <meta charset="UTF-8">
  <title>Înregistrare</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div class="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
    <h2 class="text-2xl font-bold mb-6">Înregistrare</h2>
    <form action="/signup" method="POST" novalidate class="space-y-4">
      <div>
        <label for="name" class="block font-medium">Nume complet</label>
        <input type="text" id="name" name="name" required class="w-full border rounded px-3 py-2 mt-1">
      </div>

      <div>
        <label for="email" class="block font-medium">Email</label>
        <input type="email" id="email" name="email" required class="w-full border rounded px-3 py-2 mt-1">
      </div>

      <div>
        <label for="password" class="block font-medium">Parolă</label>
        <input type="password" id="password" name="password" required class="w-full border rounded px-3 py-2 mt-1">
      </div>

      <div>
        <label for="confirm" class="block font-medium">Confirmă parola</label>
        <input type="password" id="confirm" name="confirm" required class="w-full border rounded px-3 py-2 mt-1">
      </div>

      <div>
        <span class="block font-medium">Tip cont:</span>
        <div class="space-x-4 mt-2">
          <label><input type="radio" name="role" value="organizer" required> Organizator</label>
          <label><input type="radio" name="role" value="participant"> Participant</label>
        </div>
      </div>

      <button type="submit" class="w-full bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700">
        Înregistrează-te
      </button>
    </form>
  </div>
</body>
</html>
<!DOCTYPE html>
<html lang="ro">
<head>
  <meta charset="UTF-8" />
  <title>Dashboard Participant</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 text-gray-900">
  <div class="max-w-4xl mx-auto p-6">
    <h1 class="text-3xl font-bold mb-4">Bun venit, participant!</h1>
    <h2 class="text-xl font-semibold mb-6">Evenimente disponibile</h2>

    <% if (events.length === 0) { %>
      <p class="text-gray-500">Nu sunt evenimente disponibile momentan.</p>
    <% } else { %>
      <div class="space-y-6">
        <% events.forEach(event => { %>
          <div class="bg-white p-4 rounded-lg shadow">
            <h3 class="text-lg font-bold"><%= event.title %></h3>
            <p><strong>Descriere:</strong> <%= event.description %></p>
            <p><strong>Locație:</strong> <%= event.location %></p>
            <p><strong>Data:</strong> <%= new Date(event.event_date).toLocaleString("ro-RO") %></p>
            <p><strong>Locuri disponibile:</strong> <%= event.max_participants %></p>

            <form action="/register" method="POST" class="mt-3">
              <input type="hidden" name="event_id" value="<%= event.id %>">
              <button type="submit" class="bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700">
                Înscrie-te
              </button>
            </form>
          </div>
        <% }) %>
      </div>
    <% } %>
  </div>
</body>
</html>
var mysql = require('mysql2');
require('dotenv').config();

// Crearea unui pool de conexiuni la MySQL
const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  port: process.env.DB_PORT,
  waitForConnections: true,
  connectionLimit: 10, // Limita de conexiuni simultane
  queueLimit: 0
});

// Testare conexiune
pool.getConnection((err, connection) => {
  if (err) {
    console.error('Eroare la conectare:' + err.stack);
    return;
  }
  console.log('✅ Conectat la MySQL!');
  connection.release(); // eliberăm conexiunea pentru a o reutiliza
});

module.exports = pool;
const connection = require('../db');

// === DEFINIRE FUNCȚII ===

// Afișează formularul de login
function showLoginForm(req, res) {
  res.render('login'); // views/login.ejs
}

// Procesează datele de login
function loginUser(req, res) {
  const { email, password } = req.body;

  const sql = 'SELECT * FROM users WHERE email = ? AND password = ?'; // NOTĂ: folosește bcrypt în producție
  connection.query(sql, [email, password], (err, results) => {
    if (err) {
      console.error('Eroare la login:', err);
      return res.status(500).send('Eroare la server');
    }

    if (results.length > 0) {
      const user = results[0];

      // Redirectare în funcție de tipul de utilizator
      if (user.role === 'participant') {
        res.redirect(`/dashboard/participant/${user.id}`);
      } else {
        res.redirect(`/create-event/${user.id}`); // Organizer merge la formularul de creare eveniment
      }
    } else {
      res.send('Email sau parolă incorectă.');
    }
  });
}

// Afișează formularul de signup
function showSignupForm(req, res) {
  res.render('signup');
}

// Procesează datele de înregistrare
function signupUser(req, res) {
  const { name, email, password, confirm, role } = req.body;

  if (password !== confirm) {
    return res.send("Parolele nu se potrivesc.");
  }

  const sql = "INSERT INTO users (name, email, password, role) VALUES (?, ?, ?, ?)";
  connection.query(sql, [name, email, password, role], (err, result) => {
    if (err) {
      console.error('Eroare la salvarea utilizatorului:', err);
      return res.status(500).send("Eroare la salvarea utilizatorului.");
    }
    res.redirect('/login');
  });
}

// === EXPORT ===
module.exports = {
  showLoginForm,
  loginUser,
  showSignupForm,
  signupUser
};
const connection = require('../db'); // conexiune DB

// Afișează toate evenimentele (pagina principală)
exports.index = (req, res) => {
  connection.query('SELECT * FROM events', (err, results) => {
    if (err) {
      console.error('Eroare la interogare:', err);
      return res.status(500).send('Eroare la interogare');
    }
    res.render('main', { events: results });
  });
};

// Formular creare eveniment (primește organizerId din URL)
exports.showCreateForm = (req, res) => {
  const organizerId = req.params.organizerId;
  res.render('createEvent', { organizerId }); // trimite organizerId la view
};

// Creare eveniment (folosește organizerId din URL, restul din body)
exports.createEvent = (req, res) => {
  const organizerId = req.params.organizerId;
  const { title, description, location, event_date, max_participants } = req.body;
  const maxParts = max_participants || 100;

  const sql = `INSERT INTO events (organizer_id, title, description, location, event_date, max_participants) VALUES (?, ?, ?, ?, ?, ?)`;
  const params = [organizerId, title, description, location, event_date, maxParts];

  connection.query(sql, params, (err, result) => {
    if (err) {
      console.error('Eroare la inserarea evenimentului:', err);
      return res.status(500).send('Eroare la inserarea evenimentului');
    }
    res.redirect('/');
  });
};

// Dashboard participant (primește participantId din URL)
exports.participantDashboard = (req, res) => {
  const participantId = req.params.id;

  // Exemplu simplu: afișăm toate evenimentele (poți extinde să afișezi doar cele la care participă)
  connection.query('SELECT * FROM events', (err, events) => {
    if (err) {
      console.error('Eroare la afișarea evenimentelor:', err);
      return res.status(500).send("Eroare la afișarea evenimentelor");
    }
    res.render('participantDashboard', { participantId, events });
  });
};

// Formular login
exports.showLoginForm = (req, res) => {
  res.render('login');
};

// Procesare login
exports.loginUser = (req, res) => {
  const { email, password } = req.body;

  const sql = 'SELECT * FROM users WHERE email = ? AND password = ?';
  connection.query(sql, [email, password], (err, results) => {
    if (err) {
      console.error('Eroare la login:', err);
      return res.status(500).send('Eroare la server');
    }

    if (results.length > 0) {
      const user = results[0];
      // redirect după rol
      if (user.type === 'organizer') {
        res.redirect(`/create-event/${user.id}`);
      } else {
        res.redirect(`/dashboard/participant/${user.id}`);
      }
    } else {
      res.send('Email sau parolă incorectă.');
    }
  });
};

// Formular signup (dacă vrei să-l pui aici)
exports.showSignupForm = (req, res) => {
  res.render('signup');
};

// Procesare signup (ar trebui să validezi, criptezi parola, etc.)
exports.signupUser = (req, res) => {
  const { name, email, password, confirm, type } = req.body;

  if (password !== confirm) {
    return res.send("Parolele nu coincid.");
  }

  const sql = 'INSERT INTO users (name, email, password, type) VALUES (?, ?, ?, ?)';
  connection.query(sql, [name, email, password, type], (err, result) => {
    if (err) {
      console.error('Eroare la înregistrare:', err);
      return res.status(500).send('Eroare la înregistrare');
    }
    res.redirect('/login');
  });
};
// models/user.js
const mysql = require('mysql2/promise');
const db = require('../db');

module.exports = {
  async createUser({ name, email, password, role }) {
    const conn = await db.getConnection();
    const [result] = await conn.execute(
      'INSERT INTO users (name, email, password, role, created_at) VALUES (?, ?, ?, ?, NOW())',
      [name, email, password, role]
    );
    return result.insertId;
  },

  async findByEmail(email) {
    const conn = await db.getConnection();
    const [rows] = await conn.execute(
      'SELECT * FROM users WHERE email = ?',
      [email]
    );
    return rows[0];
  }
};
-- Create `users` table
CREATE TABLE IF NOT EXISTS users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(100) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  role ENUM('organizer','participant') NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create `events` table
CREATE TABLE IF NOT EXISTS events (
  id INT AUTO_INCREMENT PRIMARY KEY,
  organizer_id INT NOT NULL,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  location VARCHAR(255) NOT NULL,
  event_date DATETIME NOT NULL,
  max_participants INT DEFAULT 100,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  photo VARCHAR(255), 
  FOREIGN KEY (organizer_id) REFERENCES users(id)
    ON DELETE CASCADE ON UPDATE CASCADE
);

-- Create `registrations` table
CREATE TABLE IF NOT EXISTS registrations (
  id INT AUTO_INCREMENT PRIMARY KEY,
  event_id INT NOT NULL,
  participant_id INT NOT NULL,
  registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (event_id) REFERENCES events(id)
    ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (participant_id) REFERENCES users(id)
    ON DELETE CASCADE ON UPDATE CASCADE
);

-- Insert users
INSERT INTO users (name, email, password, role) VALUES
('Alice Organizer', 'alice@event.com', 'hashedpassword1', 'organizer'),
('Bob Participant', 'bob@user.com', 'hashedpassword2', 'participant'),
('Carol Participant', 'carol@user.com', 'hashedpassword3', 'participant');

-- Insert events
INSERT INTO events (organizer_id, title, description, location, event_date, max_participants, photo) VALUES
(1, 'Tech Conference', 'A conference about the latest in tech.', 'New York', '2025-08-01 09:00:00', 200, 'img/tech-conference.png'),
(1, 'Startup Pitch Night', 'Pitch your startup ideas.', 'San Francisco', '2025-09-10 18:30:00', 50, 'img/pitch-night.png');


-- Insert registrations
INSERT INTO registrations (event_id, participant_id) VALUES
(1, 2),  -- Bob registers for Tech Conference
(2, 3);  -- Carol registers for Startup Pitch Night
const express = require('express');
const path = require('path'); 
const app = express();
const port = 3000;

// Importăm rutele
const indexRoutes = require('./routes/eventRoutes'); 
const authRoutes = require('./routes/authRoutes');

// Middleware pentru body parsing
app.use(express.urlencoded({ extended: true }));

// Setează motorul de template la EJS
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views')); // Verifică dacă ai directorul views

// Servește fișierele statice (CSS, JS, imagini, etc.)
app.use(express.static('public'));

// Folosește rutele
app.use('/', indexRoutes);

// Pornește serverul
app.listen(port, () => {
  console.log(`Serverul este activ pe http://localhost:${port}`);
});

app.use('/', authRoutes);
